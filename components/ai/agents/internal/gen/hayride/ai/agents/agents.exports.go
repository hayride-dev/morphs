// Code generated by wit-bindgen-go. DO NOT EDIT.

package agents

import (
	"go.bytecodealliance.org/cm"
)

// Exports represents the caller-defined exports from "hayride:ai/agents@0.0.61".
var Exports struct {
	// Error represents the caller-defined exports for resource "hayride:ai/agents@0.0.61#error".
	Error struct {
		// Destructor represents the caller-defined, exported destructor for resource "error".
		//
		// Resource destructor.
		Destructor func(self cm.Rep)

		// Code represents the caller-defined, exported method "code".
		//
		// return the error code.
		//
		//	code: func() -> error-code
		Code func(self cm.Rep) (result ErrorCode)

		// Data represents the caller-defined, exported method "data".
		//
		// errors can propagated with backend specific status through a string value.
		//
		//	data: func() -> string
		Data func(self cm.Rep) (result string)
	}

	// Agent represents the caller-defined exports for resource "hayride:ai/agents@0.0.61#agent".
	Agent struct {
		// Destructor represents the caller-defined, exported destructor for resource "agent".
		//
		// Resource destructor.
		Destructor func(self cm.Rep)

		// Constructor represents the caller-defined, exported constructor for resource "agent".
		//
		//	constructor(name: string, instruction: string, tools: tools, context: context,
		//	format: format, graph: graph-execution-context-stream)
		Constructor func(name string, instruction string, tools_ Tools, context_ Context, format Format, graph GraphExecutionContextStream) (result Agent)

		// Invoke represents the caller-defined, exported method "invoke".
		//
		//	invoke: func(input: message) -> result<list<message>, error>
		Invoke func(self cm.Rep, input Message) (result cm.Result[cm.List[Message], cm.List[Message], Error])

		// InvokeStream represents the caller-defined, exported method "invoke-stream".
		//
		//	invoke-stream: func(message: message, writer: output-stream) -> result<_, error>
		InvokeStream func(self cm.Rep, message Message, writer OutputStream) (result cm.Result[Error, struct{}, Error])
	}
}
