// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package graphstream represents the imported interface "hayride:ai/graph-stream@0.0.60".
package graphstream

import (
	inferencestream "github.com/hayride-dev/morphs/components/ai/agents/internal/gen/hayride/ai/inference-stream"
	"github.com/hayride-dev/morphs/components/ai/agents/internal/gen/wasi/nn/errors"
	"github.com/hayride-dev/morphs/components/ai/agents/internal/gen/wasi/nn/tensor"
	"go.bytecodealliance.org/cm"
)

// Error represents the imported type alias "hayride:ai/graph-stream@0.0.60#error".
//
// See [errors.Error] for more information.
type Error = errors.Error

// Tensor represents the imported type alias "hayride:ai/graph-stream@0.0.60#tensor".
//
// See [tensor.Tensor] for more information.
type Tensor = tensor.Tensor

// GraphExecutionContextStream represents the imported type alias "hayride:ai/graph-stream@0.0.60#graph-execution-context-stream".
//
// See [inferencestream.GraphExecutionContextStream] for more information.
type GraphExecutionContextStream = inferencestream.GraphExecutionContextStream

// GraphStream represents the imported resource "hayride:ai/graph-stream@0.0.60#graph-stream".
//
//	resource graph-stream
type GraphStream cm.Resource

// ResourceDrop represents the imported resource-drop for resource "graph-stream".
//
// Drops a resource handle.
//
//go:nosplit
func (self GraphStream) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_GraphStreamResourceDrop((uint32)(self0))
	return
}

// InitExecutionContextStream represents the imported method "init-execution-context-stream".
//
//	init-execution-context-stream: func() -> result<graph-execution-context-stream,
//	error>
//
//go:nosplit
func (self GraphStream) InitExecutionContextStream() (result cm.Result[GraphExecutionContextStream, GraphExecutionContextStream, Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_GraphStreamInitExecutionContextStream((uint32)(self0), &result)
	return
}

// LoadByName represents the imported function "load-by-name".
//
// Load a `graph` by name.
//
// How the host expects the names to be passed and how it stores the graphs for retrieval
// via
// this function is **implementation-specific**. This allows hosts to choose name
// schemes that
// range from simple to complex (e.g., URLs?) and caching mechanisms of various kinds.
//
//	load-by-name: func(name: string) -> result<graph-stream, error>
//
//go:nosplit
func LoadByName(name string) (result cm.Result[GraphStream, GraphStream, Error]) {
	name0, name1 := cm.LowerString(name)
	wasmimport_LoadByName((*uint8)(name0), (uint32)(name1), &result)
	return
}
