// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package tools represents the imported interface "hayride:ai/tools@0.0.56".
package tools

import (
	"github.com/hayride-dev/morphs/components/ai/agents/internal/gen/hayride/ai/types"
	"go.bytecodealliance.org/cm"
)

// ToolSchema represents the type alias "hayride:ai/tools@0.0.56#tool-schema".
//
// See [types.ToolSchema] for more information.
type ToolSchema = types.ToolSchema

// ToolInput represents the type alias "hayride:ai/tools@0.0.56#tool-input".
//
// See [types.ToolInput] for more information.
type ToolInput = types.ToolInput

// ToolOutput represents the type alias "hayride:ai/tools@0.0.56#tool-output".
//
// See [types.ToolOutput] for more information.
type ToolOutput = types.ToolOutput

// ErrorCode represents the enum "hayride:ai/tools@0.0.56#error-code".
//
//	enum error-code {
//		tool-call-failed,
//		tool-not-found,
//		unknown
//	}
type ErrorCode uint8

const (
	ErrorCodeToolCallFailed ErrorCode = iota
	ErrorCodeToolNotFound
	ErrorCodeUnknown
)

var _ErrorCodeStrings = [3]string{
	"tool-call-failed",
	"tool-not-found",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e ErrorCode) String() string {
	return _ErrorCodeStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *ErrorCode) UnmarshalText(text []byte) error {
	return _ErrorCodeUnmarshalCase(e, text)
}

var _ErrorCodeUnmarshalCase = cm.CaseUnmarshaler[ErrorCode](_ErrorCodeStrings[:])

// Error represents the imported resource "hayride:ai/tools@0.0.56#error".
//
//	resource error
type Error cm.Resource

// ResourceDrop represents the imported resource-drop for resource "error".
//
// Drops a resource handle.
//
//go:nosplit
func (self Error) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorResourceDrop((uint32)(self0))
	return
}

// Code represents the imported method "code".
//
// return the error code.
//
//	code: func() -> error-code
//
//go:nosplit
func (self Error) Code() (result ErrorCode) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ErrorCode((uint32)(self0))
	result = (ErrorCode)((uint32)(result0))
	return
}

// Data represents the imported method "data".
//
// errors can propagated with backend specific status through a string value.
//
//	data: func() -> string
//
//go:nosplit
func (self Error) Data() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ErrorData((uint32)(self0), &result)
	return
}

// Tools represents the imported resource "hayride:ai/tools@0.0.56#tools".
//
//	resource tools
type Tools cm.Resource

// ResourceDrop represents the imported resource-drop for resource "tools".
//
// Drops a resource handle.
//
//go:nosplit
func (self Tools) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ToolsResourceDrop((uint32)(self0))
	return
}

// NewTools represents the imported constructor for resource "tools".
//
//	constructor()
//
//go:nosplit
func NewTools() (result Tools) {
	result0 := wasmimport_NewTools()
	result = cm.Reinterpret[Tools]((uint32)(result0))
	return
}

// Call represents the imported method "call".
//
//	call: func(input: tool-input) -> result<tool-output, error-code>
//
//go:nosplit
func (self Tools) Call(input ToolInput) (result cm.Result[ToolOutputShape, ToolOutput, ErrorCode]) {
	self0 := cm.Reinterpret[uint32](self)
	input0, input1, input2, input3, input4, input5, input6, input7 := lower_ToolInput(input)
	wasmimport_ToolsCall((uint32)(self0), (*uint8)(input0), (uint32)(input1), (*uint8)(input2), (uint32)(input3), (*uint8)(input4), (uint32)(input5), (*[2]string)(input6), (uint32)(input7), &result)
	return
}

// Capabilities represents the imported method "capabilities".
//
//	capabilities: func() -> result<list<tool-schema>, error>
//
//go:nosplit
func (self Tools) Capabilities() (result cm.Result[cm.List[ToolSchema], cm.List[ToolSchema], Error]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ToolsCapabilities((uint32)(self0), &result)
	return
}
