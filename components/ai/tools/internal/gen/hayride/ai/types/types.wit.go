// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "hayride:ai/types@0.0.60".
package types

import (
	"go.bytecodealliance.org/cm"
)

// Role represents the enum "hayride:ai/types@0.0.60#role".
//
//	enum role {
//		user,
//		assistant,
//		system,
//		tool,
//		unknown
//	}
type Role uint8

const (
	RoleUser Role = iota
	RoleAssistant
	RoleSystem
	RoleTool
	RoleUnknown
)

var _RoleStrings = [5]string{
	"user",
	"assistant",
	"system",
	"tool",
	"unknown",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e Role) String() string {
	return _RoleStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e Role) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *Role) UnmarshalText(text []byte) error {
	return _RoleUnmarshalCase(e, text)
}

var _RoleUnmarshalCase = cm.CaseUnmarshaler[Role](_RoleStrings[:])

// TextContent represents the record "hayride:ai/types@0.0.60#text-content".
//
//	record text-content {
//		text: string,
//		content-type: string,
//	}
type TextContent struct {
	_           cm.HostLayout `json:"-"`
	Text        string        `json:"text"`
	ContentType string        `json:"content-type"`
}

// ToolSchema represents the record "hayride:ai/types@0.0.60#tool-schema".
//
//	record tool-schema {
//		id: string,
//		name: string,
//		description: string,
//		params-schema: string,
//	}
type ToolSchema struct {
	_            cm.HostLayout `json:"-"`
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Description  string        `json:"description"`
	ParamsSchema string        `json:"params-schema"`
}

// ToolInput represents the record "hayride:ai/types@0.0.60#tool-input".
//
//	record tool-input {
//		content-type: string,
//		id: string,
//		name: string,
//		input: list<tuple<string, string>>,
//	}
type ToolInput struct {
	_           cm.HostLayout      `json:"-"`
	ContentType string             `json:"content-type"`
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Input       cm.List[[2]string] `json:"input"`
}

// ToolOutput represents the record "hayride:ai/types@0.0.60#tool-output".
//
//	record tool-output {
//		content-type: string,
//		id: string,
//		name: string,
//		output: string,
//	}
type ToolOutput struct {
	_           cm.HostLayout `json:"-"`
	ContentType string        `json:"content-type"`
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Output      string        `json:"output"`
}

// Content represents the variant "hayride:ai/types@0.0.60#content".
//
//	variant content {
//		none,
//		text(text-content),
//		tool-schema(tool-schema),
//		tool-input(tool-input),
//		tool-output(tool-output),
//	}
type Content cm.Variant[uint8, ToolSchemaShape, ToolSchema]

// ContentNone returns a [Content] of case "none".
func ContentNone() Content {
	var data struct{}
	return cm.New[Content](0, data)
}

// None returns true if [Content] represents the variant case "none".
func (self *Content) None() bool {
	return self.Tag() == 0
}

// ContentText returns a [Content] of case "text".
func ContentText(data TextContent) Content {
	return cm.New[Content](1, data)
}

// Text returns a non-nil *[TextContent] if [Content] represents the variant case "text".
func (self *Content) Text() *TextContent {
	return cm.Case[TextContent](self, 1)
}

// ContentToolSchema returns a [Content] of case "tool-schema".
func ContentToolSchema(data ToolSchema) Content {
	return cm.New[Content](2, data)
}

// ToolSchema returns a non-nil *[ToolSchema] if [Content] represents the variant case "tool-schema".
func (self *Content) ToolSchema() *ToolSchema {
	return cm.Case[ToolSchema](self, 2)
}

// ContentToolInput returns a [Content] of case "tool-input".
func ContentToolInput(data ToolInput) Content {
	return cm.New[Content](3, data)
}

// ToolInput returns a non-nil *[ToolInput] if [Content] represents the variant case "tool-input".
func (self *Content) ToolInput() *ToolInput {
	return cm.Case[ToolInput](self, 3)
}

// ContentToolOutput returns a [Content] of case "tool-output".
func ContentToolOutput(data ToolOutput) Content {
	return cm.New[Content](4, data)
}

// ToolOutput returns a non-nil *[ToolOutput] if [Content] represents the variant case "tool-output".
func (self *Content) ToolOutput() *ToolOutput {
	return cm.Case[ToolOutput](self, 4)
}

var _ContentStrings = [5]string{
	"none",
	"text",
	"tool-schema",
	"tool-input",
	"tool-output",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Content) String() string {
	return _ContentStrings[v.Tag()]
}

// Message represents the record "hayride:ai/types@0.0.60#message".
//
//	record message {
//		role: role,
//		content: list<content>,
//	}
type Message struct {
	_       cm.HostLayout    `json:"-"`
	Role    Role             `json:"role"`
	Content cm.List[Content] `json:"content"`
}
