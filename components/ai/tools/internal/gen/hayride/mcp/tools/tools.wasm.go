// Code generated by wit-bindgen-go. DO NOT EDIT.

package tools

import (
	"go.bytecodealliance.org/cm"
)

// This file contains wasmimport and wasmexport declarations for "hayride:mcp@0.0.61".

//go:wasmimport [export]hayride:mcp/tools@0.0.61 [resource-new]error
//go:noescape
func wasmimport_ErrorResourceNew(rep0 uint32) (result0 uint32)

//go:wasmimport [export]hayride:mcp/tools@0.0.61 [resource-rep]error
//go:noescape
func wasmimport_ErrorResourceRep(self0 uint32) (result0 uint32)

//go:wasmimport [export]hayride:mcp/tools@0.0.61 [resource-drop]error
//go:noescape
func wasmimport_ErrorResourceDrop(self0 uint32)

//go:wasmexport hayride:mcp/tools@0.0.61#[dtor]error
//export hayride:mcp/tools@0.0.61#[dtor]error
func wasmexport_ErrorDestructor(self0 uint32) {
	self := cm.Reinterpret[cm.Rep]((uint32)(self0))
	Exports.Error.Destructor(self)
	return
}

//go:wasmexport hayride:mcp/tools@0.0.61#[method]error.code
//export hayride:mcp/tools@0.0.61#[method]error.code
func wasmexport_ErrorCode(self0 uint32) (result0 uint32) {
	self := cm.Reinterpret[cm.Rep]((uint32)(self0))
	result := Exports.Error.Code(self)
	result0 = (uint32)(result)
	return
}

//go:wasmexport hayride:mcp/tools@0.0.61#[method]error.data
//export hayride:mcp/tools@0.0.61#[method]error.data
func wasmexport_ErrorData(self0 uint32) (result *string) {
	self := cm.Reinterpret[cm.Rep]((uint32)(self0))
	result_ := Exports.Error.Data(self)
	result = &result_
	return
}

//go:wasmimport [export]hayride:mcp/tools@0.0.61 [resource-new]tools
//go:noescape
func wasmimport_ToolsResourceNew(rep0 uint32) (result0 uint32)

//go:wasmimport [export]hayride:mcp/tools@0.0.61 [resource-rep]tools
//go:noescape
func wasmimport_ToolsResourceRep(self0 uint32) (result0 uint32)

//go:wasmimport [export]hayride:mcp/tools@0.0.61 [resource-drop]tools
//go:noescape
func wasmimport_ToolsResourceDrop(self0 uint32)

//go:wasmexport hayride:mcp/tools@0.0.61#[dtor]tools
//export hayride:mcp/tools@0.0.61#[dtor]tools
func wasmexport_ToolsDestructor(self0 uint32) {
	self := cm.Reinterpret[cm.Rep]((uint32)(self0))
	Exports.Tools.Destructor(self)
	return
}

//go:wasmexport hayride:mcp/tools@0.0.61#[constructor]tools
//export hayride:mcp/tools@0.0.61#[constructor]tools
func wasmexport_Constructor() (result0 uint32) {
	result := Exports.Tools.Constructor()
	result0 = cm.Reinterpret[uint32](result)
	return
}

//go:wasmexport hayride:mcp/tools@0.0.61#[method]tools.call-tool
//export hayride:mcp/tools@0.0.61#[method]tools.call-tool
func wasmexport_ToolsCallTool(self0 uint32, params0 *uint8, params1 uint32, params2 *[2]string, params3 uint32) (result *cm.Result[CallToolResultShape, CallToolResult, Error]) {
	self := cm.Reinterpret[cm.Rep]((uint32)(self0))
	params := lift_CallToolParams((*uint8)(params0), (uint32)(params1), (*[2]string)(params2), (uint32)(params3))
	result_ := Exports.Tools.CallTool(self, params)
	result = &result_
	return
}

//go:wasmexport hayride:mcp/tools@0.0.61#[method]tools.list-tools
//export hayride:mcp/tools@0.0.61#[method]tools.list-tools
func wasmexport_ToolsListTools(self0 uint32, cursor0 *uint8, cursor1 uint32) (result *cm.Result[ListToolsResultShape, ListToolsResult, Error]) {
	self := cm.Reinterpret[cm.Rep]((uint32)(self0))
	cursor := cm.LiftString[string]((*uint8)(cursor0), (uint32)(cursor1))
	result_ := Exports.Tools.ListTools(self, cursor)
	result = &result_
	return
}
